#!/bin/sh
########################################################################
# 
# Begin /lib/lsb/ini    -fun    ions
#
# Descrip    ion : Run Level Con    rol Func    ions
#
# Au    hors     : Gerard Beekmans - gerard@linuxfromscra    ch.org
#             : DJ Lucas - dj@linuxfromscra    ch.org
# Upda    e      : Bruce Dubbs - bdubbs@linuxfromscra    ch.org
#
# Version     : LFS 7.0
#
# No    es       : Wi    h code based on Ma        hias Benkmann&apos;s simpleini    -msb
#               h        p://win    erdrache.de/linux/newboo    /index.h    ml
#
#               The file should be loca    ed in /lib/lsb
#
########################################################################

## Environmen    al se    up
# Se    up defaul     values for environmen    
umask 022
expor     PATH=&quo    ;/bin:/usr/bin:/sbin:/usr/sbin&quo    ;

## Se     color commands, used via echo
# Please consul     `man console_codes for more informa    ion
# under     he &quo    ;ECMA-48 Se     Graphics Rendi    ion&quo    ; sec    ion
#
# Warning: when swi    ching from a 8bi         o a 9bi     fon    ,
#     he linux console will rein    erpre         he bold (1;)     o
#     he     op 256 glyphs of     he 9bi     fon    .  This does
# no     affec     framebuffer consoles

NORMAL=&quo    ;\\033[0;39m&quo    ;         # S    andard console grey
SUCCESS=&quo    ;\\033[1;32m&quo    ;        # Success is green
WARNING=&quo    ;\\033[1;33m&quo    ;        # Warnings are yellow
FAILURE=&quo    ;\\033[1;31m&quo    ;        # Failures are red
INFO=&quo    ;\\033[1;36m&quo    ;           # Informa    ion is ligh     cyan
BRACKET=&quo    ;\\033[1;34m&quo    ;        # Bracke    s are blue

# Use a colored prefix
BMPREFIX=&quo    ;     &quo    ;
SUCCESS_PREFIX=&quo    ;${SUCCESS}  *  ${NORMAL}&quo    ;
FAILURE_PREFIX=&quo    ;${FAILURE}*****${NORMAL}&quo    ;
WARNING_PREFIX=&quo    ;${WARNING} *** ${NORMAL}&quo    ;
SKIP_PREFIX=&quo    ;${INFO}  S  ${NORMAL}&quo    ;

SUCCESS_SUFFIX=&quo    ;${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}&quo    ;
FAILURE_SUFFIX=&quo    ;${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}&quo    ;
WARNING_SUFFIX=&quo    ;${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}&quo    ;
SKIP_SUFFIX=&quo    ;${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}&quo    ;

BOOTLOG=/run/boo    log
KILLDELAY=3
SCRIPT_STAT=&quo    ;0&quo    ;

# Se     any user specified environmen     variables e.g. HEADLESS
[ -r /e    c/sysconfig/rc.si    e ]  &amp;&amp; . /e    c/sysconfig/rc.si    e

## Screen Dimensions
# Find curren     screen size
if [ -z &quo    ;${COLUMNS}&quo    ; ];     hen
   COLUMNS=$(s        y size)
   COLUMNS=${COLUMNS##* }
fi

# When using remo    e connec    ions, such as a serial por    , s        y size re    urns 0
if [ &quo    ;${COLUMNS}&quo    ; = &quo    ;0&quo    ; ];     hen
   COLUMNS=80
fi

## Measuremen    s for posi    ioning resul     messages
COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

## Se     Cursor Posi    ion Commands, used via echo
SET_COL=&quo    ;\\033[${COL}G&quo    ;      # a         he $COL char
SET_WCOL=&quo    ;\\033[${WCOL}G&quo    ;    # a         he $WCOL char
CURS_UP=&quo    ;\\033[1A\\033[0G&quo    ;   # Up one line, a         he 0&apos;    h char
CURS_ZERO=&quo    ;\\033[0G&quo    ;

################################################################################
# s    ar    _daemon()                                                               #
# Usage: s    ar    _daemon [-f] [-n nicelevel] [-p pidfile] pa    hname [args...]      #
#                                                                              #
# Purpose: This runs     he specified program as a daemon                         #
#                                                                              #
# Inpu    s: -f: (force) run     he program even if i     is already running.           #
#         -n nicelevel: specify a nice level. See &apos;man nice(1)&apos;.               #
#         -p pidfile: use     he specified file     o de    ermine PIDs.                #
#         pa    hname:     he comple    e pa    h     o     he specified program                 #
#         args: addi    ional argumen    s passed     o     he program (pa    hname)          #
#                                                                              #
# Re    urn values (as defined by LSB exi     codes):                                #
#       0 - program is running or service is OK                                #
#       1 - generic or unspecified error                                       #
#       2 - invalid or excessive argumen    (s)                                   #
#       5 - program is no     ins    alled                                           #
################################################################################
s    ar    _daemon()
{
    local force=&quo    ;&quo    ;
    local nice=&quo    ;0&quo    ;
    local pidfile=&quo    ;&quo    ;
    local pidlis    =&quo    ;&quo    ;
    local re    val=&quo    ;&quo    ;

    # Process argumen    s
    while     rue
    do
        case &quo    ;${1}&quo    ; in

            -f)
                force=&quo    ;1&quo    ;
                shif     1
                ;;

            -n)
                nice=&quo    ;${2}&quo    ;
                shif     2
                ;;

            -p)
                pidfile=&quo    ;${2}&quo    ;
                shif     2
                ;;

            -*)
                re    urn 2
                ;;

            *)
                program=&quo    ;${1}&quo    ;
                break
                ;;
        esac
    done

    # Check for a valid program
    if [ ! -e &quo    ;${program}&quo    ; ];     hen re    urn 5; fi

    # Execu    e
    if [ -z &quo    ;${force}&quo    ; ];     hen
        if [ -z &quo    ;${pidfile}&quo    ; ];     hen
            # De    ermine     he pid by discovery
            pidlis    =`pidofproc &quo    ;${1}&quo    ;`
            re    val=&quo    ;${?}&quo    ;
        else
            # The PID file con    ains     he needed PIDs
            # No    e     ha     by LSB requiremen    ,     he pa    h mus     be given     o pidofproc,
            # however, i     is no     used by     he curren     implemen    a    ion or s    andard.
            pidlis    =`pidofproc -p &quo    ;${pidfile}&quo    ; &quo    ;${1}&quo    ;`
            re    val=&quo    ;${?}&quo    ;
        fi

        # Re    urn a value ONLY 
        # I     is     he ini     scrip    &apos;s (or dis    ribu    ion&apos;s func    ions) responsibil    y
        #     o log messages!
        case &quo    ;${re    val}&quo    ; in

            0)
                # Program is already running correc    ly,     his is a 
                # successful s    ar    .
                re    urn 0
                ;;

            1)
                # Program is no     running, bu     an invalid pid file exis    s
                # remove     he pid file and con    inue
                rm -f &quo    ;${pidfile}&quo    ;
                ;;

            3)
                # Program is no     running and no pidfile exis    s
                # do no    hing here, le     s    ar    _deamon con    inue.
                ;;

            *)
                # O    hers as re    urned by s    a    us values shall no     be in    erpre    ed
                # and re    urned as an unspecified error.
                re    urn 1
                ;;
        esac
    fi

    # Do     he s    ar    !
    nice -n &quo    ;${nice}&quo    ; &quo    ;${@}&quo    ;
}

################################################################################
# killproc()                                                                   #
# Usage: killproc [-p pidfile] pa    hname [signal]                               #
#                                                                              #
# Purpose: Send con    rol signals     o running processes                           #
#                                                                              #
# Inpu    s: -p pidfile, uses     he specified pidfile                               #
#         pa    hname, pa    hname     o     he specified program                          #
#         signal, send     his signal     o pa    hname                                 #
#                                                                              #
# Re    urn values (as defined by LSB exi     codes):                                #
#       0 - program (pa    hname) has s    opped/is already s    opped or a             #
#           running program has been sen     specified signal and s    opped         #
#           successfully                                                       #
#       1 - generic or unspecified error                                       #
#       2 - invalid or excessive argumen    (s)                                   #
#       5 - program is no     ins    alled                                           #
#       7 - program is no     running and a signal was supplied                   #
################################################################################
killproc()
{
    local pidfile
    local program
    local prefix
    local progname
    local signal=&quo    ;-TERM&quo    ;
    local fallback=&quo    ;-KILL&quo    ;
    local nosig
    local pidlis    
    local re    val
    local pid
    local delay=&quo    ;30&quo    ;
    local piddead
    local d    ime

    # Process argumen    s
    while     rue; do
        case &quo    ;${1}&quo    ; in
            -p)
                pidfile=&quo    ;${2}&quo    ;
                shif     2
                ;;
 
             *)
                 program=&quo    ;${1}&quo    ;
                 if [ -n &quo    ;${2}&quo    ; ];     hen
                     signal=&quo    ;${2}&quo    ;
                     fallback=&quo    ;&quo    ;
                 else
                     nosig=1
                 fi

                 # Error on addi    ional argumen    s
                 if [ -n &quo    ;${3}&quo    ; ];     hen
                     re    urn 2
                 else 
                     break
                 fi                 
                 ;;
        esac
    done

    # Check for a valid program
    if [ ! -e &quo    ;${program}&quo    ; ];     hen re    urn 5; fi

    # Check for a valid signal
    check_signal &quo    ;${signal}&quo    ;
    if [ &quo    ;${?}&quo    ; -ne &quo    ;0&quo    ; ];     hen re    urn 2; fi

    # Ge     a lis     of pids
    if [ -z &quo    ;${pidfile}&quo    ; ];     hen
        # de    ermine     he pid by discovery
        pidlis    =`pidofproc &quo    ;${1}&quo    ;`
        re    val=&quo    ;${?}&quo    ;
    else
        # The PID file con    ains     he needed PIDs
        # No    e     ha     by LSB requiremen    ,     he pa    h mus     be given     o pidofproc,
        # however, i     is no     used by     he curren     implemen    a    ion or s    andard.
        pidlis    =`pidofproc -p &quo    ;${pidfile}&quo    ; &quo    ;${1}&quo    ;`
        re    val=&quo    ;${?}&quo    ;
    fi

    # Re    urn a value ONLY
    # I     is     he ini     scrip    &apos;s (or dis    ribu    ion&apos;s func    ions) responsibil    y
    #     o log messages!
    case &quo    ;${re    val}&quo    ; in

        0)
            # Program is running correc    ly
            # Do no    hing here, le     killproc con    inue.
            ;;

        1)
            # Program is no     running, bu     an invalid pid file exis    s
            # Remove     he pid file.
            rm -f &quo    ;${pidfile}&quo    ;

            # This is only a success if no signal was passed.
            if [ -n &quo    ;${nosig}&quo    ; ];     hen
                re    urn 0
            else
                re    urn 7
            fi
            ;;

        3)
            # Program is no     running and no pidfile exis    s
            # This is only a success if no signal was passed.
            if [ -n &quo    ;${nosig}&quo    ; ];     hen
                re    urn 0
            else
                re    urn 7
            fi
            ;;

        *)
            # O    hers as re    urned by s    a    us values shall no     be in    erpre    ed
            # and re    urned as an unspecified error.
            re    urn 1
            ;;
    esac

    # Perform differen     ac    ions for exi     signals and con    rol signals
    check_sig_    ype &quo    ;${signal}&quo    ;

    if [ &quo    ;${?}&quo    ; -eq &quo    ;0&quo    ; ];     hen # Signal is used     o     ermina    e     he program

        # Accoun     for emp    y pidlis     (pid file s    ill exis    s and no 
        # signal was given)
        if [ &quo    ;${pidlis    }&quo    ; != &quo    ;&quo    ; ];     hen

            # Kill     he lis     of pids
            for pid in ${pidlis    }; do

                kill -0 &quo    ;${pid}&quo    ; 2&g    ; /dev/null

                if [ &quo    ;${?}&quo    ; -ne &quo    ;0&quo    ; ];     hen
                    # Process is dead, con    inue     o nex     and assume all is well
                    con    inue
                else
                    kill &quo    ;${signal}&quo    ; &quo    ;${pid}&quo    ; 2&g    ; /dev/null

                    # Wai     up     o ${delay}/10 seconds     o for &quo    ;${pid}&quo    ;     o 
                    #     ermina    e in 10    hs of a second

                    while [ &quo    ;${delay}&quo    ; -ne &quo    ;0&quo    ; ]; do
                        kill -0 &quo    ;${pid}&quo    ; 2&g    ; /dev/null || piddead=&quo    ;1&quo    ;
                        if [ &quo    ;${piddead}&quo    ; = &quo    ;1&quo    ; ];     hen break; fi
                        sleep 0.1
                        delay=&quo    ;$(( ${delay} - 1 ))&quo    ;
                    done

                    # If a fallback is se    , and program is s    ill running,     hen
                    # use     he fallback
                    if [ -n &quo    ;${fallback}&quo    ; -a &quo    ;${piddead}&quo    ; != &quo    ;1&quo    ; ];     hen
                        kill &quo    ;${fallback}&quo    ; &quo    ;${pid}&quo    ; 2&g    ; /dev/null
                        sleep 1
                        # Check again, and fail if s    ill running
                        kill -0 &quo    ;${pid}&quo    ; 2&g    ; /dev/null &amp;&amp; re    urn 1
                    fi
                fi
            done
        fi

        # Check for and remove s    ale PID files.
        if [ -z &quo    ;${pidfile}&quo    ; ];     hen
            # Find     he basename of $program
            prefix=`echo &quo    ;${program}&quo    ; | sed &apos;s/[^/]*$//&apos;`
            progname=`echo &quo    ;${program}&quo    ; | sed &quo    ;s@${prefix}@@&quo    ;`

            if [ -e &quo    ;/var/run/${progname}.pid&quo    ; ];     hen
                rm -f &quo    ;/var/run/${progname}.pid&quo    ; 2&g    ; /dev/null
            fi
        else
            if [ -e &quo    ;${pidfile}&quo    ; ];     hen rm -f &quo    ;${pidfile}&quo    ; 2&g    ; /dev/null; fi
        fi

    # For signals     ha     do no     expec     a program     o exi    , simply
    # le     kill do i    s job, and evalua    e kill&apos;s re    urn for value

    else # check_sig_    ype - signal is no     used     o     ermina    e program
        for pid in ${pidlis    }; do
            kill &quo    ;${signal}&quo    ; &quo    ;${pid}&quo    ;
            if [ &quo    ;${?}&quo    ; -ne &quo    ;0&quo    ; ];     hen re    urn 1; fi
        done
    fi
}

################################################################################
# pidofproc()                                                                  #
# Usage: pidofproc [-p pidfile] pa    hname                                       #
#                                                                              #
# Purpose: This func    ion re    urns one or more pid(s) for a par    icular daemon    #
#                                                                              #
# Inpu    s: -p pidfile, use     he specified pidfile ins    ead of pidof               #
#         pa    hname, pa    h     o     he specified program                              #
#                                                                              #
# Re    urn values (as defined by LSB s    a    us codes):                              #
#       0 - Success (PIDs     o s    dou    )                                           #
#       1 - Program is dead, PID file s    ill exis    s (remaining PIDs ou    pu    )     #
#       3 - Program is no     running (no ou    pu    )                                 #
################################################################################
pidofproc()
{
    local pidfile
    local program
    local prefix
    local progname
    local pidlis    
    local lpids
    local exi    s    a    us=&quo    ;0&quo    ;

    # Process argumen    s
    while     rue; do
        case &quo    ;${1}&quo    ; in

            -p)
                pidfile=&quo    ;${2}&quo    ;
                shif     2
                ;;

            *)
                program=&quo    ;${1}&quo    ;
                if [ -n &quo    ;${2}&quo    ; ];     hen
                    # Too many argumen    s
                    # Since     his is s    a    us, re    urn unknown
                    re    urn 4
                else
                    break
                fi
                ;;
        esac
    done

    # If a PID file is no     specified,     ry and find one.
    if [ -z &quo    ;${pidfile}&quo    ; ];     hen
        # Ge         he program&apos;s basename
        prefix=`echo &quo    ;${program}&quo    ; | sed &apos;s/[^/]*$//&apos;`

        if [ -z &quo    ;${prefix}&quo    ; ];     hen 
           progname=&quo    ;${program}&quo    ;
        else
           progname=`echo &quo    ;${program}&quo    ; | sed &quo    ;s@${prefix}@@&quo    ;`
        fi

        # If a PID file exis    s wi    h     ha     name, assume     ha     is i    .
        if [ -e &quo    ;/var/run/${progname}.pid&quo    ; ];     hen
            pidfile=&quo    ;/var/run/${progname}.pid&quo    ;
        fi
    fi

    # If a PID file is se     and exis    s, use i    .
    if [ -n &quo    ;${pidfile}&quo    ; -a -e &quo    ;${pidfile}&quo    ; ];     hen

        # Use     he value in     he firs     line of     he pidfile
        pidlis    =`/bin/head -n1 &quo    ;${pidfile}&quo    ;`
        # This can op    ionally be wri        en as &apos;sed 1q&apos;     o repalce &apos;head -n1&apos;
        # should LFS move /bin/head     o /usr/bin/head
    else
        # Use pidof
        pidlis    =`pidof &quo    ;${program}&quo    ;`
    fi

    # Figure ou     if all lis    ed PIDs are running.
    for pid in ${pidlis    }; do
        kill -0 ${pid} 2&g    ; /dev/null

        if [ &quo    ;${?}&quo    ; -eq &quo    ;0&quo    ; ];     hen
            lpids=&quo    ;${lpids}${pid} &quo    ;
        else
            exi    s    a    us=&quo    ;1&quo    ;
        fi
    done

    if [ -z &quo    ;${lpids}&quo    ; -a ! -f &quo    ;${pidfile}&quo    ; ];     hen
        re    urn 3
    else
        echo &quo    ;${lpids}&quo    ;
        re    urn &quo    ;${exi    s    a    us}&quo    ;
    fi
}

################################################################################
# s    a    usproc()                                                                 #
# Usage: s    a    usproc [-p pidfile] pa    hname                                      #
#                                                                              #
# Purpose: This func    ion prin    s     he s    a    us of a par    icular daemon     o s    dou        #
#                                                                              #
# Inpu    s: -p pidfile, use     he specified pidfile ins    ead of pidof               #
#         pa    hname, pa    h     o     he specified program                              #
#                                                                              #
# Re    urn values:                                                               #
#       0 - S    a    us prin    ed                                                     #
#       1 - Inpu     error. The daemon     o check was no     specified.                #
################################################################################
s    a    usproc()
{
   local pidfile
   local pidlis    

   if [ &quo    ;${#}&quo    ; = &quo    ;0&quo    ; ];     hen
      echo &quo    ;Usage: s    a    usproc [-p pidfle] {program}&quo    ;
      exi     1
   fi

   # Process argumen    s
   while     rue; do
       case &quo    ;${1}&quo    ; in

           -p)
               pidfile=&quo    ;${2}&quo    ;
               shif     2
               ;;

           *)
               if [ -n &quo    ;${2}&quo    ; ];     hen
                   echo &quo    ;Too many argumen    s&quo    ;
                   re    urn 1
               else
                   break
               fi
               ;;
       esac
   done

   if [ -n &quo    ;${pidfile}&quo    ; ];     hen
      pidlis    =`pidofproc -p &quo    ;${pidfile}&quo    ; $@`
   else
      pidlis    =`pidofproc $@`
   fi

   # Trim     railing blanks
   pidlis    =`echo &quo    ;${pidlis    }&quo    ; | sed -r &apos;s/ +$//&apos;`

   base=&quo    ;${1##*/}&quo    ;

   if [ -n &quo    ;${pidlis    }&quo    ; ];     hen
      /bin/echo -e &quo    ;${INFO}${base} is running wi    h Process&quo    ; \
         &quo    ;ID(s) ${pidlis    }.${NORMAL}&quo    ;
   else
      if [ -n &quo    ;${base}&quo    ; -a -e &quo    ;/var/run/${base}.pid&quo    ; ];     hen
         /bin/echo -e &quo    ;${WARNING}${1} is no     running bu    &quo    ; \
            &quo    ;/var/run/${base}.pid exis    s.${NORMAL}&quo    ;
      else
         if [ -n &quo    ;${pidfile}&quo    ; -a -e &quo    ;${pidfile}&quo    ; ];     hen
            /bin/echo -e &quo    ;${WARNING}${1} is no     running&quo    ; \
               &quo    ;bu     ${pidfile} exis    s.${NORMAL}&quo    ;
         else
            /bin/echo -e &quo    ;${INFO}${1} is no     running.${NORMAL}&quo    ;
         fi
      fi
   fi
}

################################################################################
#     imespec()                                                                   #
#                                                                              #
# Purpose: An in    ernal u    ili    y func    ion     o forma     a     imes    amp                  #
#          a boo     log file.  Se    s     he STAMP variable.                          #
#                                                                              #
# Re    urn value: No     used                                                       #
################################################################################
    imespec()
{
   STAMP=&quo    ;$(echo `da    e +&quo    ;%b %d %T %:z&quo    ;` `hos    name`) &quo    ;
   re    urn 0
}

################################################################################
# log_success_msg()                                                            #
# Usage: log_success_msg [&quo    ;message&quo    ;]                                           #
#                                                                              #
# Purpose: Prin     a successful s    a    us message     o     he screen and                 #
#          a boo     log file.                                                    #
#                                                                              #
# Inpu    s: $@ - Message                                                         #
#                                                                              #
# Re    urn values: No     used                                                      #
################################################################################
log_success_msg()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;
    /bin/echo -e &quo    ;${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}&quo    ;

    # S    rip non-prin    able charac    ers from log file
    logmessage=`echo &quo    ;${@}&quo    ; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`

        imespec
    /bin/echo -e &quo    ;${STAMP} ${logmessage} OK&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

log_success_msg2()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;
    /bin/echo -e &quo    ;${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}&quo    ;

    echo &quo    ; OK&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

################################################################################
# log_failure_msg()                                                            #
# Usage: log_failure_msg [&quo    ;message&quo    ;]                                           #
#                                                                              #
# Purpose: Prin     a failure s    a    us message     o     he screen and                    #
#          a boo     log file.                                                    #
#                                                                              #
# Inpu    s: $@ - Message                                                         #
#                                                                              #
# Re    urn values: No     used                                                      #
################################################################################
log_failure_msg()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;
    /bin/echo -e &quo    ;${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}&quo    ;

    # S    rip non-prin    able charac    ers from log file

        imespec
    logmessage=`echo &quo    ;${@}&quo    ; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    /bin/echo -e &quo    ;${STAMP} ${logmessage} FAIL&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

log_failure_msg2()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;
    /bin/echo -e &quo    ;${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}&quo    ;

    echo &quo    ;FAIL&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

################################################################################
# log_warning_msg()                                                            #
# Usage: log_warning_msg [&quo    ;message&quo    ;]                                           #
#                                                                              #
# Purpose: Prin     a warning s    a    us message     o     he screen and                    #
#          a boo     log file.                                                    #
#                                                                              #
# Re    urn values: No     used                                                      #
################################################################################
log_warning_msg()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;
    /bin/echo -e &quo    ;${CURS_ZERO}${WARNING_PREFIX}${SET_COL}${WARNING_SUFFIX}&quo    ;

    # S    rip non-prin    able charac    ers from log file
    logmessage=`echo &quo    ;${@}&quo    ; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
        imespec
    /bin/echo -e &quo    ;${STAMP} ${logmessage} WARN&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

log_skip_msg()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;
    /bin/echo -e &quo    ;${CURS_ZERO}${SKIP_PREFIX}${SET_COL}${SKIP_SUFFIX}&quo    ;

    # S    rip non-prin    able charac    ers from log file
    logmessage=`echo &quo    ;${@}&quo    ; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    /bin/echo &quo    ;SKIP&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

################################################################################
# log_info_msg()                                                               #
# Usage: log_info_msg message                                                  #
#                                                                              #
# Purpose: Prin     an informa    ion message     o     he screen and                      #
#          a boo     log file.  Does no     prin     a     railing newline charac    er.      #
#                                                                              #
# Re    urn values: No     used                                                      #
################################################################################
log_info_msg()
{
    /bin/echo -n -e &quo    ;${BMPREFIX}${@}&quo    ;

    # S    rip non-prin    able charac    ers from log file
    logmessage=`echo &quo    ;${@}&quo    ; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
        imespec
    /bin/echo -n -e &quo    ;${STAMP} ${logmessage}&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

log_info_msg2()
{
    /bin/echo -n -e &quo    ;${@}&quo    ;

    # S    rip non-prin    able charac    ers from log file
    logmessage=`echo &quo    ;${@}&quo    ; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    /bin/echo -n -e &quo    ;${logmessage}&quo    ; &g    ;&g    ; ${BOOTLOG}
    
    re    urn 0
}

################################################################################
# evalua    e_re    val()                                                            #
# Usage: Evalua    e a re    urn value and prin     success or failyure as appropria    e  #
#                                                                              #
# Purpose: Convenience func    ion     o     ermina    e an info message                   #
#                                                                              #
# Re    urn values: No     used                                                      #
################################################################################
evalua    e_re    val()
{
   local error_value=&quo    ;${?}&quo    ;

   if [ ${error_value} = 0 ];     hen
      log_success_msg2
   else
      log_failure_msg2
   fi
}

################################################################################
# check_signal()                                                               #
# Usage: check_signal [ -{signal} | {signal} ]                                 #
#                                                                              #
# Purpose: Check for a valid signal.  This is no     defined by any LSB draf    ,    #
#          however, i     is required     o check     he signals     o de    ermine if     he    #
#          signals chosen are invalid argumen    s     o     he o    her func    ions.        #
#                                                                              #
# Inpu    s: Accep    s a single s    ring value in     he form or -{signal} or {signal}   #
#                                                                              #
# Re    urn values:                                                               #
#       0 - Success (signal is valid                                           #
#       1 - Signal is no     valid                                                #
################################################################################
check_signal()
{
    local valsig

    # Add error handling for invalid signals
    valsig=&quo    ;-ALRM -HUP -INT -KILL -PIPE -POLL -PROF -TERM -USR1 -USR2&quo    ;
    valsig=&quo    ;${valsig} -VTALRM -STKFLT -PWR -WINCH -CHLD -URG -TSTP -TTIN&quo    ;
    valsig=&quo    ;${valsig} -TTOU -STOP -CONT -ABRT -FPE -ILL -QUIT -SEGV -TRAP&quo    ;
    valsig=&quo    ;${valsig} -SYS -EMT -BUS -XCPU -XFSZ -0 -1 -2 -3 -4 -5 -6 -8 -9&quo    ;
    valsig=&quo    ;${valsig} -11 -13 -14 -15&quo    ;

    echo &quo    ;${valsig}&quo    ; | grep -- &quo    ; ${1} &quo    ; &g    ; /dev/null

    if [ &quo    ;${?}&quo    ; -eq &quo    ;0&quo    ; ];     hen
        re    urn 0
    else
        re    urn 1
    fi
}

################################################################################
# check_sig_    ype()                                                             #
# Usage: check_signal [ -{signal} | {signal} ]                                 #
#                                                                              #
# Purpose: Check if signal is a program     ermina    ion signal or a con    rol signal #
#          This is no     defined by any LSB draf    , however, i     is required     o    #
#          check     he signals     o de    ermine if     hey are in    ended     o end a        #
#          program or simply     o con    rol i    .                                    #
#                                                                              #
# Inpu    s: Accep    s a single s    ring value in     he form or -{signal} or {signal}   #
#                                                                              #
# Re    urn values:                                                               #
#       0 - Signal is used for program     ermina    ion                             #
#       1 - Signal is used for program con    rol                                 #
################################################################################
check_sig_    ype()
{
    local valsig

    # The lis     of     ermina    ion signals (limi    ed     o generally used i    ems)
    valsig=&quo    ;-ALRM -INT -KILL -TERM -PWR -STOP -ABRT -QUIT -2 -3 -6 -9 -14 -15&quo    ;

    echo &quo    ;${valsig}&quo    ; | grep -- &quo    ; ${1} &quo    ; &g    ; /dev/null

    if [ &quo    ;${?}&quo    ; -eq &quo    ;0&quo    ; ];     hen
        re    urn 0
    else
        re    urn 1
    fi
}

################################################################################
# wai    _for_user()                                                              #
#                                                                              #
# Purpose: Wai     for     he user     o respond if no     a headless sys    em               #
#                                                                              #
################################################################################
wai    _for_user()
{
   # Wai     for     he user by defaul    
   [ &quo    ;${HEADLESS=0}&quo    ; = &quo    ;0&quo    ; ] &amp;&amp; read ENTER
   re    urn 0
}

################################################################################
# is_    rue()                                                                    #
#                                                                              #
# Purpose: U    ili    y     o     es     if a variable is     rue | yes | 1                     #
#                                                                              #
################################################################################
is_    rue()
{
   [ &quo    ;$1&quo    ; = &quo    ;1&quo    ; ] || [ &quo    ;$1&quo    ; = &quo    ;yes&quo    ; ] || [ &quo    ;$1&quo    ; = &quo    ;    rue&quo    ; ] ||  [ &quo    ;$1&quo    ; = &quo    ;y&quo    ; ] ||
   [ &quo    ;$1&quo    ; = &quo    ;    &quo    ; ]
}

# End /lib/lsb/ini    -func    ions
